#

hfe_effect_population_country_set_robot_pop_identity = {
	if = {
		limit = {
			has_trait = trait_machine_unit
#			is_robot_pop = yes
			owner = {
				is_machine_empire = no
			}
		}
		every_owned_pop_species = {
			limit = {
				has_trait = trait_machine_unit
#				is_robot_pop = yes
#				not = {
#					is_same_species = prev.species
#				}
			}
			root = {
				modify_species = {
					base = prev
					species = prev
					add_trait = hfe_species_trait_test
				}
			}
			set_species_identity = prev.species
			root = {
				modify_species = {
					species = prev
					remove_trait = hfe_species_trait_test
				}
			}
		}
	}
	else_if = {
		limit = {
			has_trait = trait_mechanical
		}
		every_owned_pop_species = {
			limit = {
				has_trait = trait_mechanical
				not = {
					is_same_species = prev.species
				}
			}
			root = {
				modify_species = {
					base = none
					species = prev
					add_trait = hfe_species_trait_test
				}
			}
			set_species_identity = prev.species
			root = {
				modify_species = {
					species = prev
					remove_trait = hfe_species_trait_test
				}
			}
		}
	}
	else = {
		random_owned_pop = {
			limit = {
				has_trait = trait_mechanical
			}
			save_event_target_as = hfe_robot_pop_species
		}
		every_owned_pop_species = {
			limit = {
				has_trait = trait_mechanical
				exists = event_target:hfe_robot_pop_species
				not = {
					is_same_species = event_target:hfe_robot_pop_species
				}
			}
			root = {
				modify_species = {
					base = none
					species = prev
					add_trait = hfe_species_trait_test
				}
			}
#			set_species_identity = prev.species
			set_species_identity = prev
			root = {
				modify_species = {
					species = prev
					remove_trait = hfe_species_trait_test
				}
			}
		}
	}
}

hfe_effect_population_fix_robot_pop = {
	if = {
		limit = {
			has_trait = trait_machine_unit
			exists = owner
			owner = {
				is_machine_empire = no
			}
		}
		modify_species = {
			base = prev
			remove_trait = trait_machine_unit
			add_trait = trait_mechanical
		}
		remove_modifier = pop_recently_conquered
	}
	else_if = {
		limit = {
			has_trait = trait_mechanical
			exists = owner
			owner = {
				is_machine_empire = yes
			}
		}
		modify_species = {
			remove_trait = trait_mechanical
			add_trait = trait_machine_unit
		}
		remove_modifier = pop_recently_conquered
	}
}

hfe_effect_population_remove_object_shield_global = {
	every_ambient_object = {
		limit = {
			has_ambient_object_flag = hfe_population_object_shield
		}
		destroy_ambient_object = this
	}
}