#
namespace = human_fallen_empires_maintenance

# This = Ship
# From = Disabler Ship
# kill starbases of drone on_ship_disabled
ship_event = {
	id = human_fallen_empires_maintenance.0
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = this
		exists = owner
		owner = {
			is_country_type = human_fallen_empires_drone
		}
		is_ship_class = shipclass_starbase
	}

	immediate = {
		owner = {
			every_owned_planet = {
				limit = {
					solar_system = {
						is_same_value = root.solar_system
					}
				}
				human_fallen_empires_effect_convert_to_asteroid = yes
			}
		}
		#log = "drone loss starbase on [root.solar_system.GetName] killer [root.from.owner.GetName]"
		destroy_fleet = fleet
	}
}

# log drone outpost
ship_event = {
	id = human_fallen_empires_maintenance.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		always = no
		exists = owner
		owner = {
			or = {
				is_country_type = human_fallen_empires_drone
				is_country_type = human_fallen_empires_pirate
			}
		}
	}

	immediate = {
		log = "outpost build in [root.solar_system.GetName] by [root.owner.GetName]"
	}
}

#
planet_event = {
	id = human_fallen_empires_maintenance.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = {
			is_country_type = human_fallen_empires_drone
		}
	}

	immediate = {
		log = "converting to asteroid [this.GetName]"
		human_fallen_empires_effect_convert_to_asteroid = yes
	}
}

ship_event = {
	id = human_fallen_empires_maintenance.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = solar_system
		exists = owner
		owner = {
			is_country_type = human_fallen_empires_drone
		}
		has_global_flag = human_fallen_empires_drone_awake
	}

	immediate = {
		solar_system = {
			every_neighbor_system = {
				limit = {
					is_surveyed = {
						who = root.owner
						status = no
					}
				}
				every_system_planet = {
					surveyed = {
						set_surveyed = yes
						surveyor = root.owner
					}
				}
				every_neighbor_system = {
					limit = {
						is_surveyed = {
							who = root.owner
							status = no
						}
					}
					every_system_planet = {
						surveyed = {
							set_surveyed = yes
							surveyor = root.owner
						}
					}
				}
			}
		}
	}
}

# building_assimilator feature
# on_purge_complete
planet_event = {
	id = human_fallen_empires_maintenance.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_owned_pop = {
			has_pop_flag = human_fallen_empires_building_assimilator
			is_being_force_purged = yes
			human_fallen_empires_trigger_assimilator_on_tile = yes
		}
	}

	immediate = {
		random_tile = {
			limit = {
				has_building = human_fallen_empires_building_assimilator
				is_ruined = no
				not = {
					exists = pop
				}
			}
			#log = "assimilator tile saved"
			save_event_target_as = human_fallen_empires_assimilator_tile_target
		}
		owner = {
			country_event = {
				id = human_fallen_empires_maintenance.14
				days = 1
			}
			human_fallen_empires_effect_add_unity.1 = yes
			human_fallen_empires_effect_add_society_research.2 = yes
		}
	}
}

# on_pop_migration_end on_pop_moved on_pop_resettled
pop_event = {
	id = human_fallen_empires_maintenance.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		human_fallen_empires_trigger_assimilator_pop_valid_with_ai_block = yes
		human_fallen_empires_trigger_assimilator_on_tile = yes
	}

	immediate = {
		set_pop_flag = human_fallen_empires_building_assimilator
		purge = yes
	}
}

# on_pop_migration_end on_pop_moved on_pop_resettled
pop_event = {
	id = human_fallen_empires_maintenance.12
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_pop_flag = human_fallen_empires_building_assimilator
		is_being_force_purged = yes
		human_fallen_empires_trigger_assimilator_on_tile = no
	}

	immediate = {
		remove_pop_flag = human_fallen_empires_building_assimilator
		purge = no
	}
}

planet_event = {
	id = human_fallen_empires_maintenance.13
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_owned_pop = {
			pop_event = {
				id = human_fallen_empires_maintenance.12
			}
		}
	}
}

# assimilator auto resettle
country_event = {
	id = human_fallen_empires_maintenance.14
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = human_fallen_empires_assimilator_discovered
		not = {
			has_policy_flag = human_fallen_empires_policies_assimilator.7
		}
		or = {
			has_policy_flag = human_fallen_empires_policies_assimilator.0
			has_policy_flag = human_fallen_empires_policies_assimilator.1
			has_policy_flag = human_fallen_empires_policies_assimilator.2
			has_policy_flag = human_fallen_empires_policies_assimilator.3
			has_policy_flag = human_fallen_empires_policies_assimilator.4
			has_policy_flag = human_fallen_empires_policies_assimilator.5
			has_policy_flag = human_fallen_empires_policies_assimilator.6
		}
	}

	immediate = {
		if = {
			limit = {
				not = {
					exists = event_target:human_fallen_empires_assimilator_tile_target
				}
			}
			random_owned_planet = {
				limit = {
					any_tile = {
						has_building = human_fallen_empires_building_assimilator
						is_ruined = no
						not = {
							exists = pop
						}
					}
				}
				random_tile = {
					limit = {
						has_building = human_fallen_empires_building_assimilator
						is_ruined = no
						not = {
							exists = pop
						}
					}
					save_event_target_as = human_fallen_empires_assimilator_tile_target
				}
			}
		}
		if = {
			limit = {
				exists = event_target:human_fallen_empires_assimilator_tile_target
			}
			human_fallen_empires_effect_assimilator_find_pop = yes
			if = {
				limit = {
					exists = event_target:human_fallen_empires_assimilator_pop_target
				}
				resettle_pop = {
					pop = event_target:human_fallen_empires_assimilator_pop_target
					planet = event_target:human_fallen_empires_assimilator_tile_target.planet
					tile = event_target:human_fallen_empires_assimilator_tile_target
				}
				event_target:human_fallen_empires_assimilator_pop_target = {
					pop_event = {
						id = human_fallen_empires_maintenance.11
					}
				}
			}
		}
	}
}

# fix psi traits
country_event = {
	id = human_fallen_empires_maintenance.50
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_owned_pop = {
			limit = {
				has_trait = trait_latent_psionic
				has_trait = trait_psionic
			}
			modify_species = {
				remove_trait = trait_latent_psionic
			}
		}
	}
}

# change subject type
country_event = {
	id = human_fallen_empires_maintenance.51
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_subject = {
			limit = {
				not = {
					is_subject_type = human_fallen_empires_egypt_vassal
				}
			}
			set_subject_of = {
				who = root
				subject_type = human_fallen_empires_egypt_vassal
			}
		}
	}
}

